import{_ as a,c as s,o as n,N as e}from"./chunks/framework.1e6a71f2.js";const y=JSON.parse('{"title":"tass-ui组件库","description":"","frontmatter":{},"headers":[],"relativePath":"articles/tass-ui.md"}'),l={name:"articles/tass-ui.md"},o=e(`<h1 id="tass-ui组件库" tabindex="-1">tass-ui组件库 <a class="header-anchor" href="#tass-ui组件库" aria-label="Permalink to &quot;tass-ui组件库&quot;">​</a></h1><h2 id="monorepo" tabindex="-1">monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;monorepo&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>一个仓库内包含多个开发项目（模块，包）。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>存储所有项目代码的单独位置，团队中的每个人都可以访问。</li><li>易于重用和共享代码，与团队合作。</li><li>很容易理解你的变更对整个项目的影响。</li><li>代码重构和代码大变更的最佳选择。</li><li>团队成员可以获得整个项目的总体视图。</li><li>易于管理依赖关系。</li></ul><h2 id="上传upload" tabindex="-1">上传Upload <a class="header-anchor" href="#上传upload" aria-label="Permalink to &quot;上传Upload&quot;">​</a></h2><p><a href="https://juejin.cn/post/7135121438322720799" target="_blank" rel="noreferrer">https://juejin.cn/post/7135121438322720799</a></p><h3 id="定义props" tabindex="-1">定义props <a class="header-anchor" href="#定义props" aria-label="Permalink to &quot;定义props&quot;">​</a></h3><p>首先定义一个drag来控制是否使用拖拽上传。</p><h3 id="实现拖拽" tabindex="-1">实现拖拽 <a class="header-anchor" href="#实现拖拽" aria-label="Permalink to &quot;实现拖拽&quot;">​</a></h3><p>实现拖拽上传借助的是drop事件，在组件生命周期onMounted中获取到拖拽区域的DOM，然后监听它的drop事件。</p><p>首先给拖拽区域一个ref属性。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">drop-upload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">drop</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">drag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">isDrag</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;&#39;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>然后在组件创建完成后进行事件监听。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">onMounted(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    drag.value?.addEventListener(&#39;drop&#39;, handleDrop)</span></span>
<span class="line"><span style="color:#A6ACCD;">    drag.value?.addEventListener(&#39;dragleave&#39;, (e) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    isDrag.value=false</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    drag.value?.addEventListener(&#39;dragenter&#39;, (e) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    e.preventDefault()</span></span>
<span class="line"><span style="color:#A6ACCD;">    isDrag.value=true</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">    drag.value?.addEventListener(&#39;dragover&#39;, (e) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    e.preventDefault()</span></span>
<span class="line"><span style="color:#A6ACCD;">    isDrag.value=true</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"></span></code></pre></div><p>这里需要阻止dragover的默认事件，不然drop是不生效的。</p><p>最后再加两个事件dragenter和dragleave来判断文件是否拖到这个区域从而展示不同样式。</p><p>注：HTML5新增了一个api，给一个元素设置 draggable = true 属性时,该元素就会支持拖拽。</p>`,19),p=[o];function t(r,c,i,d,D,u){return n(),s("div",null,p)}const h=a(l,[["render",t]]);export{y as __pageData,h as default};
