import{_ as l,o as s,c as a,R as n}from"./chunks/framework.e45065f2.js";const F=JSON.parse('{"title":"ES","description":"","frontmatter":{},"headers":[],"relativePath":"articles/ES笔记.md"}'),i={name:"articles/ES笔记.md"},e=n(`<h1 id="es" tabindex="-1">ES <a class="header-anchor" href="#es" aria-label="Permalink to &quot;ES&quot;">​</a></h1><h2 id="理解es" tabindex="-1"><strong>理解ES</strong> <a class="header-anchor" href="#理解es" aria-label="Permalink to &quot;**理解ES**&quot;">​</a></h2><ul><li>全称: ECMAScript</li><li>js语言的规范</li><li>我们用的js是它的实现</li><li>js的组成 <ul><li>ECMAScript(js基础)</li><li>扩展--&gt;浏览器端 <ul><li>BOM</li><li>DOM <ul><li>类型的结构: <ul><li>Node <ul><li>Document <ul><li>XMLDocument</li><li>HTMLDocument</li></ul></li><li>Element</li><li>Attribute</li><li>Text</li></ul></li></ul></li><li>对象的结构(dom对象树) <ul><li>document <ul><li>html element <ul><li>head element</li><li>body element <ul><li>p element</li><li>div element</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>扩展--&gt;服务器端 <ul><li>Node.js</li></ul></li></ul></li></ul><h2 id="es5" tabindex="-1">ES5 <a class="header-anchor" href="#es5" aria-label="Permalink to &quot;ES5&quot;">​</a></h2><ul><li><p><strong>严格模式</strong></p><ul><li>运行模式: 正常(混杂)模式与严格模式</li><li>应用上严格式: &#39;use strict&#39;;</li><li>作用: <ul><li>使得Javascript在更严格的条件下运行</li><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>需要记住的几个变化 <ul><li>声明定义变量必须用var</li><li>禁止函数中的this关键字指向全局对象</li><li>创建eval作用域, 更安全</li></ul></li></ul></li></ul></li><li><p><strong>JSON对象</strong></p><ul><li>作用: 用于在json对象/数组与js对象/数组相互转换</li><li>JSON.stringify(obj/arr) js对象(数组)转换为json对象(数组)</li><li>JSON.parse(json) json对象(数组)转换为js对象(数组)</li></ul></li><li><p>Object扩展</p><ul><li>Object.create(prototype[, descriptors]) : 创建一个新的对象 <ul><li>以指定对象为原型创建新的对象</li><li>指定新的属性, 并对属性进行描述 <ul><li>value : 指定值</li><li>writable : 标识当前属性值是否是可修改的, 默认为true</li><li><strong>get方法</strong> : 用来得到当前属性值的回调函数</li><li><strong>set方法</strong> : 用来监视当前属性值变化的回调函数</li></ul></li></ul></li><li>Object.defineProperties(object, descriptors) : 为指定对象定义扩展多个属性</li></ul></li><li><p>Array扩展</p><ul><li>Array.prototype.indexOf(value) : 得到值在数组中的第一个下标</li><li>Array.prototype.lastIndexOf(value) : 得到值在数组中的最后一个下标</li><li><strong>Array.prototype.forEach(function(item, index){}) : 遍历数组</strong></li><li><strong>Array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组</strong></li><li><strong>Array.prototype.filter(function(item, index){}) : 遍历过滤出一个子数组</strong></li><li><strong>编程的2种方式</strong><ul><li>声明式: 做什么(计算) ---填空题 ---本质是对命令式的包装</li><li>命令式: 做什么(计算)+怎么做(流程) ---问答题</li></ul></li></ul></li><li><p><strong>Function扩展</strong></p><ul><li>Function.prototype.bind(obj) <ul><li>将函数内的this绑定为obj, 并将函数返回</li></ul></li><li>面试题: 区别bind()与call()和apply()? <ul><li>fn.bind(obj) : 指定函数中的this, 并返回函数</li><li>fn.call(obj) : 指定函数中的this,并调用函数</li></ul></li></ul></li></ul><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><h3 id="常用语法" tabindex="-1"><strong>常用语法</strong> <a class="header-anchor" href="#常用语法" aria-label="Permalink to &quot;**常用语法**&quot;">​</a></h3><ul><li><p>2个新的关键字</p><ul><li>let/const</li><li>块作用域</li><li>没有变量提升</li><li>不能重复定义</li><li>值不可变</li></ul></li><li><p>变量的解构赋值</p><ul><li>将包含多个数据的对象(数组)一次赋值给多个变量</li><li>数据源: 对象/数组</li><li>目标: {a, b}/[a, b]</li></ul></li><li><p>模板字符串</p><ul><li>作用: 简化字符串的拼接</li><li>模板字符串必须用\`\`</li><li>变化的部分使用\${xxx}定义</li></ul></li><li><p>简化的对象写法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">       age</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F07178;">setName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div></li><li><p>箭头函数</p><ul><li>用来定义匿名函数</li><li>基本语法: <ul><li>没有参数: () =&gt; console.log(&#39;xxxx&#39;)</li><li>一个参数: i =&gt; i+2</li><li>大于一个参数: (i,j) =&gt; i+j</li><li>函数体不用大括号: 默认返回结果</li><li>函数体如果有多个语句, 需要用{}包围</li></ul></li><li>使用场景: 多用来定义回调函数</li></ul></li><li><p>形参的默认值</p><ul><li>定义形参时指定其默认的值</li></ul></li><li><p>点点点运算符</p><ul><li>rest(可变)参数 <ul><li>通过形参左侧的...来表达, 取代arguments的使用</li></ul></li><li>扩展运算符(...) <ul><li>可以分解出数组或对象中的数据</li></ul></li></ul></li><li><p>class类</p><ul><li>用 class 定义一类</li><li>用 constructor() 定义构造方法(相当于构造函数)</li><li>一般方法: xxx () {}</li><li>用extends来定义子类</li><li>用super()来调用父类的构造方法</li><li>方法重写: 将从父类中继承来的方法重新实现一遍</li><li>js中没有方法重载(方法名相同, 但参数不同)的语法</li></ul></li><li><p>Promise</p><ul><li>解决<code>回调地狱</code>(回调函数的层层嵌套, 编码是不断向右扩展, 阅读性很差)</li><li>能以同步编码的方式实现异步调用</li><li>在es6之前原生的js中是没这种实现的, 一些第三方框架(jQuery)实现了promise</li><li>promise对象的3个状态 <ul><li>pending: 初始化状态---&gt;新建实例对象</li><li>fullfilled: 成功状态---&gt;resolve(data)</li><li>rejected: 失败状态---&gt;reject(error)</li></ul></li><li>ES6中定义实现API:<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 创建promise对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 做异步的操作 </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">成功</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 调用成功的回调</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 调用失败的回调</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">errorMsg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 调用promise对象的then()</span></span>
<span class="line"><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">errorMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(errorMsg)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul><h3 id="其它语法" tabindex="-1">其它语法 <a class="header-anchor" href="#其它语法" aria-label="Permalink to &quot;其它语法&quot;">​</a></h3><ul><li><p>字符串扩展</p><ul><li>contains(str) : 判断是否包含指定的字符串</li><li>startsWith(str) : 判断是否以指定字符串开头</li><li>endsWith(str) : 判断是否以指定字符串结尾</li><li>repeat(count) : 重复指定次数</li></ul></li><li><p>对象扩展</p><ul><li>Object.assign(target, source1, source2..) : 将源对象的属性复制到目标对象上 assign(obj, ...sources)</li><li>Object.is(v1, v2) : 判断2个数据是否完全相等</li><li>__proto__属性 : 隐式原型属性</li></ul></li><li><p>数组扩展</p><ul><li>Array.from(v) : 将伪数组对象或可遍历对象转换为真数组</li><li>Array.of(v1, v2, v3) : 将一系列值转换成数组</li><li>find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素</li><li>findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标</li></ul></li><li><p>set/Map容器结构</p><ul><li>容器: 能保存多个数据的对象, 同时必须具备操作内部数据的方法</li><li>任意对象都可以作为容器使用, 但有的对象不太适合作为容器使用(如函数)</li><li>Set的特点: 保存多个value, value是不重复 ====&gt;数组元素去重</li><li>Map的特点: 保存多个key--value, key是不重复, value是可以重复的</li><li>API <ul><li>Set()/Set(arr) //arr是一维数组</li><li>add(value)</li><li>delete(value)</li><li>clear();</li><li>has(value)</li><li>size</li><li>Map()/Map(arr) //arr是二维数组</li><li>set(key, value)</li><li>delete(key)</li><li>clear()</li><li>has(key)</li><li>size</li></ul></li></ul></li><li><p>for--of循环</p><ul><li>可以遍历任何容器</li><li>数组</li><li>对象</li><li>伪/类对象</li><li>字符串</li><li>可迭代的对象</li></ul></li></ul><h2 id="es7" tabindex="-1">ES7 <a class="header-anchor" href="#es7" aria-label="Permalink to &quot;ES7&quot;">​</a></h2><ul><li><p>指数运算符: **</p></li><li><p>Array.prototype.includes(value) : 判断数组中是否包含指定value</p></li><li><p><strong>区别方法的2种称谓</strong></p><ul><li>静态(工具)方法 <ul><li>Fun.xxx = function(){}</li></ul></li><li>实例方法 <ul><li>所有实例对象 : Fun.prototype.xxx = function(){} //xxx针对Fun的所有实例对象</li><li>某个实例对象 : obj.xxx = function(){} //xxx只是针对fun对象</li></ul></li></ul></li></ul>`,12),o=[e];function p(t,r,c,u,y,D){return s(),a("div",null,o)}const C=l(i,[["render",p]]);export{F as __pageData,C as default};
